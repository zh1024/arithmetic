import java.io.*;
import java.lang.*;
import java.util.*;
class test  
{
	public static void main (String[] args) throws java.lang.Exception
	{
	    int[] array = new int[]{9,3,4,2,1,5,6,7,8};
	    sort(array);
		System.out.println(Arrays.toString(array));
	}
	
	private static void sort(int[] array){
	    
	    int tmp = 0;

        //对数列有序区的界定。
        
	    //1.记录最后一次交换的位置
	    int lastChangeIndex = 0;
	    //2.无序数列的边界,每次比较只需要比到这里为止
	    int sortBorder = array.length - 1;
	    
	    for(int i = 0 ;i< array.length; i++){
	        
	        //有序标记,每轮的初始值true
	        boolean isSorted = true;
	        
	        for(int j = 0; j < sortBorder; j++){
	            
	            if(array[j] > array[j + 1]){
	                tmp = array[j];
	                array[j] = array[j + 1];
	                array[j + 1] = tmp;
	                //有元素交换,所以不是有序,标记变为false
	                isSorted = false;
	                
	                //记录最后一次交换的位置
	                lastChangeIndex = j;
	            }
	            
	        }
	        //把无序数列的边界更新为最后一次交换元素的位置
	        sortBorder = lastChangeIndex;
	        
	        if(isSorted){
	            break;
	        }
	        
	    }
	    
	    
	}
}
